import ast, os


def get_class_names(file_name):
    with open(file_name, "r") as file:
        source = file.read()
        tree = ast.parse(source)
        class_names = []
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                class_names.append(node.name)
        return class_names


def extract_class_names(file_path):
    with open(file_path, "r") as f:
        lines = f.readlines()
        class_names = [line.split(" ")[1] for line in lines if line.startswith("class")]
    return class_names


def search_files(root_dir):
    class_dict = {}
    for dirpath, dirnames, filenames in os.walk(root_dir):
        for filename in filenames:
            if filename.endswith(".py"):
                file_path = os.path.join(dirpath, filename)
                module_path = file_path.replace(".py", "").replace("/", ".")
                if class_dict.get(module_path) is None:
                    class_dict[module_path] = []
                    class_names = get_class_names(file_path)
                    if class_names:
                        class_dict[module_path].extend(class_names)
    return class_dict


if __name__ == "__main__":
    cwd = os.path.dirname(os.path.abspath(__file__))
    print(cwd)
    os.chdir(os.path.join(os.path.dirname(cwd), "gem5"))
    class_dict = search_files("src")
    os.chdir(cwd)
    with open("gem5_import.py", "w", encoding="utf-8") as f:
        f.write("'''Auto-generated by gen_import.py'''\n")
        for module_path, class_names in class_dict.items():
            for class_name in class_names:
                f.write(f"from {module_path} import {class_name}\n")
